#| label: faceted-plot
#| fig-height: 6
#| fig-width: 8
#| warning: false
# Compare the distribution of 'radius_mean' across diagnoses using faceting
ggplot(data, aes(x = radius_mean, fill = Diagnosis)) +
geom_histogram(binwidth = 0.5, alpha = 0.7, position = "identity") +
facet_wrap(~ Diagnosis) +
labs(
title = "Distribution of Mean Radius by Tumor Diagnosis",
subtitle = "Malignant tumors tend to have a larger mean radius",
caption = "Faceted histograms showing 'radius_mean' distribution for each diagnosis",
x = "Mean Radius",
y = "Frequency"
) +
scale_fill_manual(values = c("B" = "#00CCCC", "M" = "salmon")) +
theme_minimal()
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
#| label: descriptive-statistics
#| echo: true
#| warning: false
# Introduction: Load and inspect the first few rows of the dataset
data <- read.csv("example_analysis_data.csv")
data <- data %>% select(-id, -X) %>% rename(Diagnosis = diagnosis)
data$Diagnosis <- factor(data$Diagnosis, levels = c("B", "M"))
head(data)
# Summary: The dataset includes various tumor measurements, with a diagnosis column indicating benign or malignant tumors.
#| label: target-variable
#| fig-height: 4
#| fig-width: 6
#| warning: false
# Plot the distribution of tumor diagnoses
ggplot(data, aes(x = Diagnosis, fill = Diagnosis)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-0.3) +
labs(
title = "Distribution of Tumor Diagnoses in the Dataset",
subtitle = "Benign tumors are more frequent than malignant tumors",
caption = "This plot shows the count of benign and malignant tumors in the dataset",
x = "Tumor Diagnosis",
y = "Count of Cases"
) +
scale_fill_manual(values = c("B" = "#00CCCC", "M" = "salmon")) +
theme_minimal()
#| label: faceted-plot
#| fig-height: 6
#| fig-width: 8
#| warning: false
# Compare the distribution of 'radius_mean' across diagnoses using faceting
ggplot(data, aes(x = radius_mean, fill = Diagnosis)) +
geom_histogram(binwidth = 0.5, alpha = 0.7, position = "identity") +
facet_wrap(~ Diagnosis) +
labs(
title = "Distribution of Mean Radius by Tumor Diagnosis",
subtitle = "Malignant tumors tend to have a larger mean radius",
caption = "Faceted histograms showing 'radius_mean' distribution for each diagnosis",
x = "Mean Radius",
y = "Frequency"
) +
scale_fill_manual(values = c("B" = "#00CCCC", "M" = "salmon")) +
theme_minimal()
#| label: correlation
#| fig-height: 10
#| fig-width: 10
#| warning: false
# Compute and visualize correlations among numeric features
correlations <- cor(data %>% select(-Diagnosis), method = "pearson")
corrplot(correlations, number.cex = .6, method = "number", type = "upper", tl.cex=1, tl.col = "black", col = COL2("RdYlBu"))
#| label: pca-analysis
#| fig-height: 8
#| fig-width: 10
#| warning: false
# Perform PCA for dimensionality reduction
pca <- prcomp(data %>% select(-Diagnosis), scale = TRUE)
# Variance explained by each component
var_explained <- data.frame(
Component = 1:length(pca$sdev),
Variance = (pca$sdev)^2,
Proportion = (pca$sdev)^2 / sum((pca$sdev)^2),
Cumulative = cumsum((pca$sdev)^2 / sum((pca$sdev)^2))
)
# Scree Plot
ggplot(var_explained[1:10,], aes(x = Component, y = Proportion)) +
geom_bar(stat = "identity", fill = "salmon") +
geom_line(color = "black") +
geom_point(color = "black") +
labs(
title = "Explained Variance by Principal Components",
subtitle = "The first few components capture the majority of variance",
caption = "Scree plot showing the variance explained by the first 10 components",
x = "Principal Component",
y = "Percentage of Explained Variance"
)
#| label: data-split
#| echo: true
#| warning: false
# Split the data into training and testing sets
set.seed(101)
split <- sample.split(data$Diagnosis, SplitRatio = 0.8)
train <- subset(data, split == TRUE)
test <- subset(data, split == FALSE)
#| label: model-training
#| echo: true
# Set up cross-validation
control <- trainControl(method = "cv", number = 10)
# Random Forest
rf_model <- train(Diagnosis ~ ., data = train, method = "rf", ntree = 1000, trControl = control, importance = TRUE)
#| label: model-evaluation
#| echo: true
#| warning: false
# Evaluate the Random Forest model on the test set
evaluate_model <- function(model, test_data) {
predictions <- predict(model, newdata = test_data)
cm <- confusionMatrix(predictions, test_data$Diagnosis)
auc_value <- auc(roc(test_data$Diagnosis, as.numeric(predictions)))
data.frame(
Accuracy = cm$overall['Accuracy'],
Sensitivity = cm$byClass['Sensitivity'],
Specificity = cm$byClass['Specificity'],
AUC = auc_value
)
}
rf_results <- evaluate_model(rf_model, test)
rf_results
#| label: roc-curve
#| fig-height: 5
#| fig-width: 10
#| warning: false
# Introduction: Plot the ROC curve to visualize model performance
rf_roc <- roc(test$Diagnosis, as.numeric(predict(rf_model, newdata = test)))
rf_df <- data.frame(Specificity = 1 - rf_roc$specificities, Sensitivity = rf_roc$sensitivities)
# Plot ROC curve using ggplot2
ggplot(rf_df, aes(x = Specificity, y = Sensitivity)) +
geom_line(size = 1, color = "green") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
labs(
title = "ROC Curve for Random Forest Classification",
subtitle = "High AUC reflects strong model discrimination ability",
caption = "ROC curve shows sensitivity vs. specificity for the Random Forest model",
x = "1 - Specificity (False Positive Rate)",
y = "Sensitivity (True Positive Rate)"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
renv::install(DataExplorer)
install.packages("DataExplorer")
install.packages("DataExplorer")
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
renv::restore()
renv::init()
renv::init(bare = TRUE)
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
renv::init(bare = TRUE)
library(renv)
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
renv::init(bare = TRUE)
library(renv)
renv::install.packages("DataExplorer")
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
renv::init(bare = TRUE)
library(renv)
renv::install("DataExplorer")
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
renv::install("DataExplorer")
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
renv::install("readr")
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
renv::install("caTools")
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
renv::status()
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
renv::init()
install.packages(c("tidyverse", "skimr", "corrplot", "ggplot2",
"caret", "pROC", "DataExplorer", "readr", "caTools"))
renv::snapshot()
install.packages(c("tidyverse", "skimr", "corrplot", "ggplot2",
"caret", "pROC", "DataExplorer", "readr", "caTools"))
renv::snapshot()
renv::restore()
library(renv)
renv::install(c("tidyverse", "skimr", "corrplot", "ggplot2",
"caret", "pROC", "DataExplorer", "readr", "caTools"))
renv::snapshot()
renv::activate()
renv::snapshot()
install.packages("DataExplorer")
renv::install(c("DataExplorer", "readr", "caTools"))
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
# renv::install(c("DataExplorer", "readr", "caTools"))
renv::restore()
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
#| echo: false
#| include: false
#| warning: false
# Setup chunk for loading libraries
library(renv)
library(tidyverse)
library(skimr)
library(corrplot)
library(ggplot2)
library(caret)
library(pROC)
library(DataExplorer)
library(readr)
library(caTools)
library(randomForest)
#| label: descriptive-statistics
#| echo: true
#| warning: false
# Introduction: Load and inspect the first few rows of the dataset
data <- read.csv("example_analysis_data.csv")
data <- data %>% select(-id, -X) %>% rename(Diagnosis = diagnosis)
data$Diagnosis <- factor(data$Diagnosis, levels = c("B", "M"))
head(data)
# Summary: The dataset includes various tumor measurements, with a diagnosis column indicating benign or malignant tumors.
#| label: target-variable
#| fig-height: 4
#| fig-width: 6
#| warning: false
# Plot the distribution of tumor diagnoses
ggplot(data, aes(x = Diagnosis, fill = Diagnosis)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), vjust=-0.3) +
labs(
title = "Distribution of Tumor Diagnoses in the Dataset",
subtitle = "Benign tumors are more frequent than malignant tumors",
caption = "This plot shows the count of benign and malignant tumors in the dataset",
x = "Tumor Diagnosis",
y = "Count of Cases"
) +
scale_fill_manual(values = c("B" = "#00CCCC", "M" = "salmon")) +
theme_minimal()
#| label: faceted-plot
#| fig-height: 6
#| fig-width: 8
#| warning: false
# Compare the distribution of 'radius_mean' across diagnoses using faceting
ggplot(data, aes(x = radius_mean, fill = Diagnosis)) +
geom_histogram(binwidth = 0.5, alpha = 0.7, position = "identity") +
facet_wrap(~ Diagnosis) +
labs(
title = "Distribution of Mean Radius by Tumor Diagnosis",
subtitle = "Malignant tumors tend to have a larger mean radius",
caption = "Faceted histograms showing 'radius_mean' distribution for each diagnosis",
x = "Mean Radius",
y = "Frequency"
) +
scale_fill_manual(values = c("B" = "#00CCCC", "M" = "salmon")) +
theme_minimal()
#| label: correlation
#| fig-height: 10
#| fig-width: 10
#| warning: false
# Compute and visualize correlations among numeric features
correlations <- cor(data %>% select(-Diagnosis), method = "pearson")
corrplot(correlations, number.cex = .6, method = "number", type = "upper", tl.cex=1, tl.col = "black", col = COL2("RdYlBu"))
#| label: pca-analysis
#| fig-height: 8
#| fig-width: 10
#| warning: false
# Perform PCA for dimensionality reduction
pca <- prcomp(data %>% select(-Diagnosis), scale = TRUE)
# Variance explained by each component
var_explained <- data.frame(
Component = 1:length(pca$sdev),
Variance = (pca$sdev)^2,
Proportion = (pca$sdev)^2 / sum((pca$sdev)^2),
Cumulative = cumsum((pca$sdev)^2 / sum((pca$sdev)^2))
)
# Scree Plot
ggplot(var_explained[1:10,], aes(x = Component, y = Proportion)) +
geom_bar(stat = "identity", fill = "salmon") +
geom_line(color = "black") +
geom_point(color = "black") +
labs(
title = "Explained Variance by Principal Components",
subtitle = "The first few components capture the majority of variance",
caption = "Scree plot showing the variance explained by the first 10 components",
x = "Principal Component",
y = "Percentage of Explained Variance"
)
#| label: data-split
#| echo: true
#| warning: false
# Split the data into training and testing sets
set.seed(101)
split <- sample.split(data$Diagnosis, SplitRatio = 0.8)
train <- subset(data, split == TRUE)
test <- subset(data, split == FALSE)
#| label: model-training
#| echo: true
# Set up cross-validation
control <- trainControl(method = "cv", number = 10)
# Random Forest
rf_model <- train(Diagnosis ~ ., data = train, method = "rf", ntree = 1000, trControl = control, importance = TRUE)
#| label: model-evaluation
#| echo: true
#| warning: false
# Evaluate the Random Forest model on the test set
evaluate_model <- function(model, test_data) {
predictions <- predict(model, newdata = test_data)
cm <- confusionMatrix(predictions, test_data$Diagnosis)
auc_value <- auc(roc(test_data$Diagnosis, as.numeric(predictions)))
data.frame(
Accuracy = cm$overall['Accuracy'],
Sensitivity = cm$byClass['Sensitivity'],
Specificity = cm$byClass['Specificity'],
AUC = auc_value
)
}
rf_results <- evaluate_model(rf_model, test)
rf_results
#| label: roc-curve
#| fig-height: 5
#| fig-width: 10
#| warning: false
# Introduction: Plot the ROC curve to visualize model performance
rf_roc <- roc(test$Diagnosis, as.numeric(predict(rf_model, newdata = test)))
rf_df <- data.frame(Specificity = 1 - rf_roc$specificities, Sensitivity = rf_roc$sensitivities)
# Plot ROC curve using ggplot2
ggplot(rf_df, aes(x = Specificity, y = Sensitivity)) +
geom_line(size = 1, color = "green") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
labs(
title = "ROC Curve for Random Forest Classification",
subtitle = "High AUC reflects strong model discrimination ability",
caption = "ROC curve shows sensitivity vs. specificity for the Random Forest model",
x = "1 - Specificity (False Positive Rate)",
y = "Sensitivity (True Positive Rate)"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
